One of the core purposes of the SQL language is to retrieve information stored in a database. This is commonly referred to as querying. Queries allow us to communicate with the database by asking questions and returning a result set with data relevant to the question.

AS is a keyword in SQL that allows you to rename a column or table using an alias. The new name can be anything you want as long as you put it inside of single quotes.
SELECT column_name AS 'alias' from db_name;

When we are examining data in a table, it can be helpful to know what distinct values exist in a particular column.
DISTINCT is used to return unique values in the output. It filters out all duplicate values in the specified column(s).
SELECT DISTINCT column_name from db_name;

We can restrict our query results using the WHERE clause in order to obtain only the information we want.
Following this format, the statement below filters the result set to only include top rated movies (IMDb ratings greater than 8):
SELECT *
FROM movies
WHERE imdb_rating > 8;

Comparison operators used with the WHERE clause are:
= equal to
!= not equal to
> greater than
< less than
>= greater than or equal to
<= less than or equal to

LIKE can be a useful operator when you want to compare similar values.
The movies table contains two films with similar titles, ‘Se7en’ and ‘Seven’.
How could we select all movies that start with ‘Se’ and end with ‘en’ and have exactly one character in the middle?

SELECT * 
FROM movies
WHERE name LIKE 'Se_en';

SELECT * FROM public.movies
WHERE genre LIKE 'D___a';

The percentage sign % is another wildcard character that can be used with LIKE.
This statement below filters the result set to only include movies with names that begin with the letter ‘A’:
SELECT * 
FROM movies
WHERE name LIKE 'A%';

% is a wildcard character that matches zero or more missing characters in the pattern. For example:
A% matches all movies with names that begin with letter ‘A’
%a matches all movies that end with ‘a’

SELECT * FROM public.movies
WHERE title LIKE 'T%n';

Unknown values are indicated by NULL.
It is not possible to test for NULL values with comparison operators, such as = and !=.
Instead, we will have to use these operators:
IS NULL
IS NOT NULL

SELECT * FROM public.movies
WHERE rating IS NULL;

The BETWEEN operator is used in a WHERE clause to filter the result set within a certain range. It accepts two values that are either numbers, text or dates.

SELECT * FROM public.movies
WHERE year BETWEEN 1999 AND 2010;

SELECT *
FROM movies
WHERE name BETWEEN 'A' AND 'J';

SELECT * FROM movies WHERE name BETWEEN "D" AND "F";

Sometimes we want to combine multiple conditions in aWHERE clause to make the result set more specific and useful.
One way of doing this is to use the AND operator.

SELECT * FROM public.movies
WHERE year BETWEEN 1999 AND 2010 
AND title LIKE 'T%';

SELECT * FROM movies WHERE year < 1985 AND genre = 'horror'

Similar to AND, the OR operator can also be used to combine multiple conditions in WHERE, but there is a fundamental difference:
AND operator displays a row if all the conditions are true.
OR operator displays a row if any condition is true.

SELECT * FROM movies WHERE genre = 'romance' OR genre = 'comedy';

SELECT * FROM public.movies WHERE movie_id > 25 OR title LIKE '%n';

We can sort the results using ORDER BY, either alphabetically or numerically. Sorting the results often makes the data more useful and easier to analyze.
ORDER BY is a clause that indicates you want to sort the result set by a particular column.
DESC is a keyword used in ORDER BY to sort the results in descending order (high to low or Z-A).
ASC is a keyword used in ORDER BY to sort the results in ascending order (low to high or A-Z).

SELECT name, year FROM movies ORDER BY name;

SELECT name, year, imdb_Rating FROM movies ORDER BY imdb_rating DESC;

SELECT * FROM public.movies ORDER BY movie_id DESC;

SELECT * FROM public.movies WHERE title LIKE '%n' ORDER BY year ASC;

We’ve been working with a fairly small table (fewer than 250 rows), but most SQL tables contain hundreds of thousands of records. In those situations, it becomes important to cap the number of rows in the result.
LIMIT is a clause that lets you specify the maximum number of rows the result set will have. This saves space on our screen and makes our queries run faster.

SELECT * FROM movies ORDER BY imdb_rating DESC LIMIT 3;

SELECT * FROM public.movies WHERE year > 2000 OR genre = 'Sci-Fi' ORDER BY rating DESC LIMIT 5;

A CASE statement allows us to create different outputs (usually in the SELECT statement). It is SQL’s way of handling if-then logic.
Each WHEN tests a condition and the following THEN gives us the string if the condition is true.
The ELSE gives us the string if all the above conditions are false.
The CASE statement must end with END.
We can add AS "column_name" to the END to properly name new column.

SELECT *,
  CASE
    WHEN genre = 'romance' OR genre = 'comedy' THEN 'Chill'
    ELSE 'Intense'
  END AS 'Mood'
FROM movies;

SELECT *,
	CASE
		WHEN year > 2015 THEN 'New'
		WHEN year > 2010 AND year < 2015 THEN 'Mid'
		WHEN year < 2010 THEN 'Old'
	END AS how_old
FROM public.movies;

SELECT is the clause we use every time we want to query information from a database.
AS renames a column or table.
DISTINCT return unique values.
WHERE is a popular command that lets you filter the results of the query based on conditions that you specify
LIKE and BETWEEN are special operators.
AND and OR combines multiple conditions.
ORDER BY sorts the result.
LIMIT specifies the maximum number of rows that the query will return.
CASE creates different outputs.